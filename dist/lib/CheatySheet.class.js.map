{"version":3,"file":"CheatySheet.class.js","sourceRoot":"","sources":["../../src/lib/CheatySheet.class.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAEA,sFAA6D;AAE7D,8EAAqD;AAErD,MAAM,OAAO,GAA8B;IACvC,GAAG,EAAE,IAAI,oBAAS,EAAE;CACvB,CAAC;AAEF,MAAM,SAAS,GAAgC;IAC3C,IAAI,EAAE,IAAI,uBAAY,EAAE;CAC3B,CAAC;AAEF,MAAqB,WAAW;IAAhC;QACI,UAAK,GAAW,0BAA0B,CAAC;QAC3C,gBAAW,GAAW,kDAAkD,CAAC;QACzE,WAAM,GAAa,EAAE,CAAC;QACtB,YAAO,GAAW,EAAE,CAAC;IA6BzB,CAAC;IA3BS,MAAM,CAAC,QAA2B;;YACpC,IAAI,gBAA0B,CAAC;YAC/B,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBAC9B,gBAAgB,GAAG,SAAS,CAAC,QAAQ,CAAC,CAAC;gBACvC,IAAI,CAAC,gBAAgB,EAAE;oBACnB,MAAM,IAAI,KAAK,CAAC,uCAAuC,QAAQ,GAAG,CAAC,CAAC;iBACvE;aACJ;iBAAM;gBACH,gBAAgB,GAAG,QAAQ,CAAC;aAC/B;YAED,OAAO,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzC,CAAC;KAAA;IAED,MAAM,CAAO,aAAa,CAAC,IAAY,EAAE,MAAuB;;YAC5D,IAAI,cAAsB,CAAC;YAC3B,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gBAC5B,cAAc,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;gBACjC,IAAI,CAAC,cAAc,EAAE;oBACjB,MAAM,IAAI,KAAK,CAAC,qCAAqC,MAAM,GAAG,CAAC,CAAC;iBACnE;aACJ;iBAAM;gBACH,cAAc,GAAG,MAAM,CAAC;aAC3B;YAED,OAAO,cAAc,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC9C,CAAC;KAAA;CACJ;AAjCD,8BAiCC","sourcesContent":["import Renderer from \"./modules/renderers/Renderer.interface\";\nimport Render from \"./modules/renderers/Render.interface\";\nimport HTMLRenderer from \"./modules/renderers/HTML.renderer\";\nimport Parser from \"./modules/parsers/Parser.interface\";\nimport YMLParser from \"./modules/parsers/YML.parser\";\n\nconst parsers: { [key: string]: Parser } = {\n    YML: new YMLParser(),\n};\n\nconst renderers: { [key: string]: Renderer } = {\n    HTML: new HTMLRenderer(),\n};\n\nexport default class CheatySheet {\n    title: string = 'Cheaty Sheet Cheat Sheet';\n    description: string = 'A Cheat Sheet for Cheaty Sheet, by @CheatySheet.';\n    blocks: object[] = [];\n    options: object = {};\n\n    async render(renderer: string | Renderer): Promise<Render> {\n        let selectedRenderer: Renderer;\n        if (typeof renderer === 'string') {\n            selectedRenderer = renderers[renderer];\n            if (!selectedRenderer) {\n                throw new Error(`Unexpected Renderer type requested: ${renderer}.`);\n            }\n        } else {\n            selectedRenderer = renderer;\n        }\n\n        return selectedRenderer.render(this);\n    }\n\n    static async parseFromDisk(path: string, parser: string | Parser): Promise<CheatySheet> {\n        let selectedParser: Parser;\n        if (typeof parser === 'string') {\n            selectedParser = parsers[parser];\n            if (!selectedParser) {\n                throw new Error(`Unexpected Parser type requested: ${parser}.`);\n            }\n        } else {\n            selectedParser = parser;\n        }\n\n        return selectedParser.parseFromDisk(path);\n    }\n}\n"]}