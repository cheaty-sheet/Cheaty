{"version":3,"file":"HTML.renderer.js","sourceRoot":"","sources":["../../../../src/lib/modules/renderers/HTML.renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import CheatySheet from \"../../CheatySheet.class\";\nimport Renderer from \"./Renderer.interface\";\nimport Render from \"./Render.interface\";\nconst fs = require('fs');\n\nclass HTMLRender implements Render {\n    content: string = '';\n    styles: { [key: string]: { [key: string]: string | number } } = {\n        'body': {\n            'background-color': '#FFFFFF',\n        },\n        '.row': {\n            'display': 'flex',\n            'align-items': 'center',\n            'justify-content': 'space-between',\n        },\n        '.col': {\n            display: 'flex',\n        },\n        '.sheetTitle': {\n        },\n        '.sheetAuthor': {\n            'font-style': 'italic',\n            'color': 'gray',\n        },\n        '.blocks': {\n            'column-count': 2,\n            'height': '100vh',\n            'column-gap': '0',\n        },\n        '.block': {\n            'break-inside': 'avoid',\n            'page-break-inside': 'avoid',\n            '-webkit-column-break-inside': 'avoid',\n        },\n        '.blockInside': {\n            'border': '1px solid gray',\n            'box-shadow': 'black 2px 2px',\n            'padding': '4px',\n            'margin-bottom': '8px',\n            'margin-right': '4px',\n            'margin-left': '4px',\n        },\n        '.blockTitle': {\n            padding: '0',\n            margin: '0',\n        },\n        '.blockContent': {\n            padding: '0',\n        },\n    };\n\n    /**\n     * Overrides the content of the HTML Page.\n     */\n    setContent(content: string): void {\n        this.content = content;\n    }\n\n    /**\n     * Add content to the HTML page (with line break).\n     */\n    appendContent(content: string): void {\n        this.content += `\\n${content}`;\n    }\n\n    saveToDisk(path: string): void {\n        fs.writeFileSync(path, this.toString());\n    }\n\n    toString(): string {\n        return `<!doctype html>\n  <html>\n    <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/styles/default.min.css\">\n    <script src=\"//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.14.2/highlight.min.js\"></script>\n    <script>hljs.initHighlightingOnLoad();</script>\n  <head>\\n\\t\\t<style>${Object.keys(this.styles).map((style: string) =>\n            `\\n${style} {${Object.keys(this.styles[style]).map((property: string) =>\n                `\\n\\t${property}: ${this.styles[style][property]};`).join('')}\\n}`\n        ).join('')}\\n\\t\\t</style>\\n\\t</head>\\n\\t<body>${this.content}\\n\\t</body>\\n</html>`\n    }\n}\n\nexport default class HTMLRenderer implements Renderer {\n    renderBlock(block: any, options: object = {}): string {\n        let blockContent = '';\n\n        if (block.content) {\n            blockContent = block.content.map((content: any) => {\n                switch (content.type) {\n                    case 'text':\n                        return `<p>${content.content}</p>`;\n                    case 'code':\n                        return `<p><pre><code class=\"${content.language || ''}\">${content.content}</code></pre></p>`;\n                    default:\n                        throw new Error(`Unrecognized block content type: ${block.type}.`);\n                }\n            }).join('');\n        }\n\n        return `<div class=\"block\"><div class=\"blockInside\">\n  <h2 class=\"blockTitle\">${block.title}</h2>\n  <section class=\"blockContent\">${blockContent}</section></div>\n</div>`;\n    }\n\n    async render(cheatySheet: CheatySheet, options: object = {}): Promise<Render> {\n        const htmlRender = new HTMLRender();\n\n        htmlRender.appendContent(`<div class=\"row\">\n  <div class=\"col\">\n    <h1>${cheatySheet.title}</h1>\n  </div>\n  <div class=\"col sheetAuthor\">${cheatySheet.description}</div>\n</div>`);\n\n        htmlRender.appendContent(`<div class=\"blocks\">${cheatySheet.blocks.map(block => this.renderBlock(block, options)).join('')}</div>`);\n\n\n        return htmlRender;\n    }\n}"]}